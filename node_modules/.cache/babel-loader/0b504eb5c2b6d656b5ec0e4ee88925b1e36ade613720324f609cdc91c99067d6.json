{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejas\\\\OneDrive\\\\Documents\\\\CION\\\\Hyderabad_Map_Project\\\\google-places-api-demo\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { GoogleMap, useLoadScript, Polyline } from \"@react-google-maps/api\";\nimport boundaryGeoJSON from \"./area.js\"; // Adjust the path as per your project structure\nimport { REACT_APP_GOOGLE_MAPS_KEY } from \"../constants/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomColor = () => {\n  // Generate random color in hexadecimal format\n  const letters = \"0123456789ABCDEF\";\n  let color = \"#\";\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\nconst MapComponent = _ref => {\n  _s();\n  let {\n    selectedLocation\n  } = _ref;\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: REACT_APP_GOOGLE_MAPS_KEY,\n    libraries: [\"places\"]\n  });\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  useEffect(() => {\n    // Simulate loading GeoJSON data (replace with actual fetch or import)\n    setTimeout(() => {\n      setGeoJsonData(boundaryGeoJSON);\n    }, 1000);\n  }, []);\n  const mapContainerStyle = {\n    width: \"100%\",\n    height: \"100%\"\n  };\n  const center = {\n    lat: selectedLocation.lat || 17.385044,\n    // Default to Hyderabad's center if selectedLocation is not available\n    lng: selectedLocation.lng || 78.486671\n  };\n  const zoom = 10;\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100%\",\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      center: center,\n      zoom: zoom,\n      children: geoJsonData && geoJsonData.features.map((feature, index) => {\n        if (feature.geometry.type !== 'LineString') return null;\n        const randomColor = getRandomColor();\n        const paths = feature.geometry.coordinates.map(coord => ({\n          lat: coord[1],\n          lng: coord[0]\n        }));\n        return /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Polyline, {\n            path: paths,\n            options: {\n              strokeColor: randomColor,\n              strokeOpacity: 0.8,\n              strokeWeight: 2\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"e7kYwu1G37gdK4rN6Z6Qm3CFf5g=\", false, function () {\n  return [useLoadScript];\n});\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","useLoadScript","Polyline","boundaryGeoJSON","REACT_APP_GOOGLE_MAPS_KEY","getRandomColor","letters","color","i","Math","floor","random","MapComponent","selectedLocation","isLoaded","loadError","googleMapsApiKey","libraries","geoJsonData","setGeoJsonData","setTimeout","mapContainerStyle","width","height","center","lat","lng","zoom","features","map","feature","index","geometry","type","randomColor","paths","coordinates","coord","strokeColor","strokeOpacity","strokeWeight"],"sources":["C:/Users/tejas/OneDrive/Documents/CION/Hyderabad_Map_Project/google-places-api-demo/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  useLoadScript,\r\n  Polyline,\r\n} from \"@react-google-maps/api\";\r\nimport boundaryGeoJSON from \"./area.js\"; // Adjust the path as per your project structure\r\nimport { REACT_APP_GOOGLE_MAPS_KEY } from \"../constants/constants\";\r\n\r\nconst getRandomColor = () => {\r\n  // Generate random color in hexadecimal format\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n};\r\n\r\nconst MapComponent = ({ selectedLocation }) => {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: REACT_APP_GOOGLE_MAPS_KEY,\r\n    libraries: [\"places\"],\r\n  });\r\n  const [geoJsonData, setGeoJsonData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Simulate loading GeoJSON data (replace with actual fetch or import)\r\n    setTimeout(() => {\r\n      setGeoJsonData(boundaryGeoJSON);\r\n    }, 1000);\r\n  }, []);\r\n\r\n  const mapContainerStyle = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  };\r\n\r\n  const center = {\r\n    lat: selectedLocation.lat || 17.385044, // Default to Hyderabad's center if selectedLocation is not available\r\n    lng: selectedLocation.lng || 78.486671,\r\n  };\r\n\r\n  const zoom = 10;\r\n\r\n  if (loadError) return \"Error loading maps\";\r\n  if (!isLoaded) return \"Loading maps\";\r\n\r\n  return (\r\n    <div style={{ height: \"100%\", width: \"100%\" }}>\r\n      <GoogleMap\r\n        mapContainerStyle={mapContainerStyle}\r\n        center={center}\r\n        zoom={zoom}>\r\n        {geoJsonData &&\r\n          geoJsonData.features.map((feature, index) => {\r\n            if (feature.geometry.type !== 'LineString') return null;\r\n\r\n            const randomColor = getRandomColor();\r\n            const paths = feature.geometry.coordinates.map((coord) => ({\r\n              lat: coord[1],\r\n              lng: coord[0],\r\n            }));\r\n\r\n            return (\r\n              <React.Fragment key={index}>\r\n                <Polyline\r\n                  path={paths}\r\n                  options={{\r\n                    strokeColor: randomColor,\r\n                    strokeOpacity: 0.8,\r\n                    strokeWeight: 2,\r\n                  }}\r\n                />\r\n              </React.Fragment>\r\n            );\r\n          })}\r\n      </GoogleMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SACEC,SAAS,EACTC,aAAa,EACbC,QAAQ,QACH,wBAAwB;AAC/B,OAAOC,eAAe,MAAM,WAAW,CAAC,CAAC;AACzC,SAASC,yBAAyB,QAAQ,wBAAwB;AAAC;AAEnE,MAAMC,cAAc,GAAG,MAAM;EAC3B;EACA,MAAMC,OAAO,GAAG,kBAAkB;EAClC,IAAIC,KAAK,GAAG,GAAG;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BD,KAAK,IAAID,OAAO,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;EAClD;EACA,OAAOJ,KAAK;AACd,CAAC;AAED,MAAMK,YAAY,GAAG,QAA0B;EAAA;EAAA,IAAzB;IAAEC;EAAiB,CAAC;EACxC,MAAM;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAGd,aAAa,CAAC;IAC5Ce,gBAAgB,EAAEZ,yBAAyB;IAC3Ca,SAAS,EAAE,CAAC,QAAQ;EACtB,CAAC,CAAC;EACF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd;IACAsB,UAAU,CAAC,MAAM;MACfD,cAAc,CAAChB,eAAe,CAAC;IACjC,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkB,iBAAiB,GAAG;IACxBC,KAAK,EAAE,MAAM;IACbC,MAAM,EAAE;EACV,CAAC;EAED,MAAMC,MAAM,GAAG;IACbC,GAAG,EAAEZ,gBAAgB,CAACY,GAAG,IAAI,SAAS;IAAE;IACxCC,GAAG,EAAEb,gBAAgB,CAACa,GAAG,IAAI;EAC/B,CAAC;EAED,MAAMC,IAAI,GAAG,EAAE;EAEf,IAAIZ,SAAS,EAAE,OAAO,oBAAoB;EAC1C,IAAI,CAACD,QAAQ,EAAE,OAAO,cAAc;EAEpC,oBACE;IAAK,KAAK,EAAE;MAAES,MAAM,EAAE,MAAM;MAAED,KAAK,EAAE;IAAO,CAAE;IAAA,uBAC5C,QAAC,SAAS;MACR,iBAAiB,EAAED,iBAAkB;MACrC,MAAM,EAAEG,MAAO;MACf,IAAI,EAAEG,IAAK;MAAA,UACVT,WAAW,IACVA,WAAW,CAACU,QAAQ,CAACC,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;QAC3C,IAAID,OAAO,CAACE,QAAQ,CAACC,IAAI,KAAK,YAAY,EAAE,OAAO,IAAI;QAEvD,MAAMC,WAAW,GAAG7B,cAAc,EAAE;QACpC,MAAM8B,KAAK,GAAGL,OAAO,CAACE,QAAQ,CAACI,WAAW,CAACP,GAAG,CAAEQ,KAAK,KAAM;UACzDZ,GAAG,EAAEY,KAAK,CAAC,CAAC,CAAC;UACbX,GAAG,EAAEW,KAAK,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,oBACE,QAAC,KAAK,CAAC,QAAQ;UAAA,uBACb,QAAC,QAAQ;YACP,IAAI,EAAEF,KAAM;YACZ,OAAO,EAAE;cACPG,WAAW,EAAEJ,WAAW;cACxBK,aAAa,EAAE,GAAG;cAClBC,YAAY,EAAE;YAChB;UAAE;YAAA;YAAA;YAAA;UAAA;QACF,GARiBT,KAAK;UAAA;UAAA;UAAA;QAAA,QAST;MAErB,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA;EACM;IAAA;IAAA;IAAA;EAAA,QACR;AAEV,CAAC;AAAC,GA7DInB,YAAY;EAAA,QACgBX,aAAa;AAAA;AAAA,KADzCW,YAAY;AA+DlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}