{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tejas\\\\OneDrive\\\\Documents\\\\CION\\\\Hyderabad_Map_Project\\\\google-places-api-demo\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { GoogleMap, useLoadScript, Polyline, Polygon } from \"@react-google-maps/api\";\nimport boundaryGeoJSON from \"./boundary.js\"; // Adjust the path as per your project structure\nimport { REACT_APP_GOOGLE_MAPS_KEY } from \"../constants/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getRandomColor = () => {\n  const letters = \"0123456789ABCDEF\";\n  let color = \"#\";\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n};\nconst MapComponent = _ref => {\n  _s();\n  let {\n    selectedLocation\n  } = _ref;\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: REACT_APP_GOOGLE_MAPS_KEY,\n    libraries: [\"places\"]\n  });\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const mapRef = useRef(null);\n  useEffect(() => {\n    setTimeout(() => {\n      setGeoJsonData(boundaryGeoJSON);\n    }, 1000);\n  }, []);\n  useEffect(() => {\n    if (selectedLocation && mapRef.current) {\n      const bounds = new window.google.maps.LatLngBounds();\n      bounds.extend(selectedLocation);\n      mapRef.current.fitBounds(bounds);\n    }\n  }, [selectedLocation]);\n  const mapContainerStyle = {\n    width: \"100%\",\n    height: \"100%\"\n  };\n  const center = {\n    lat: 17.385044,\n    lng: 78.486671\n  };\n  const zoom = 10;\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading maps\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100%\",\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: mapContainerStyle,\n      center: center,\n      zoom: zoom,\n      onLoad: map => mapRef.current = map,\n      children: [geoJsonData && geoJsonData.features.map((feature, index) => {\n        const randomColor = getRandomColor();\n        if (feature.geometry.type === 'LineString') {\n          const paths = feature.geometry.coordinates.map(coord => ({\n            lat: coord[1],\n            lng: coord[0]\n          }));\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Polyline, {\n              path: paths,\n              options: {\n                strokeColor: randomColor,\n                strokeOpacity: 0.8,\n                strokeWeight: 2\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this);\n        }\n        if (feature.geometry.type === 'Polygon') {\n          const paths = feature.geometry.coordinates[0].map(coord => ({\n            lat: coord[1],\n            lng: coord[0]\n          }));\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Polygon, {\n              paths: paths,\n              options: {\n                strokeColor: randomColor,\n                strokeOpacity: 0.8,\n                strokeWeight: 2,\n                fillColor: randomColor,\n                fillOpacity: 0.35\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this);\n        }\n        return null;\n      }), selectedLocation && /*#__PURE__*/_jsxDEV(Polygon, {\n        paths: [{\n          lat: selectedLocation.lat + 0.01,\n          lng: selectedLocation.lng - 0.01\n        }, {\n          lat: selectedLocation.lat + 0.01,\n          lng: selectedLocation.lng + 0.01\n        }, {\n          lat: selectedLocation.lat - 0.01,\n          lng: selectedLocation.lng + 0.01\n        }, {\n          lat: selectedLocation.lat - 0.01,\n          lng: selectedLocation.lng - 0.01\n        }],\n        options: {\n          strokeColor: \"#FF0000\",\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: \"#FF0000\",\n          fillOpacity: 0.35\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"whfC5PtsfuXjVB7EUhNn9ZiFQn0=\", false, function () {\n  return [useLoadScript];\n});\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","GoogleMap","useLoadScript","Polyline","Polygon","boundaryGeoJSON","REACT_APP_GOOGLE_MAPS_KEY","getRandomColor","letters","color","i","Math","floor","random","MapComponent","selectedLocation","isLoaded","loadError","googleMapsApiKey","libraries","geoJsonData","setGeoJsonData","mapRef","setTimeout","current","bounds","window","google","maps","LatLngBounds","extend","fitBounds","mapContainerStyle","width","height","center","lat","lng","zoom","map","features","feature","index","randomColor","geometry","type","paths","coordinates","coord","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity"],"sources":["C:/Users/tejas/OneDrive/Documents/CION/Hyderabad_Map_Project/google-places-api-demo/src/components/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { GoogleMap, useLoadScript, Polyline, Polygon } from \"@react-google-maps/api\";\r\nimport boundaryGeoJSON from \"./boundary.js\"; // Adjust the path as per your project structure\r\nimport { REACT_APP_GOOGLE_MAPS_KEY } from \"../constants/constants\";\r\n\r\nconst getRandomColor = () => {\r\n  const letters = \"0123456789ABCDEF\";\r\n  let color = \"#\";\r\n  for (let i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n};\r\n\r\nconst MapComponent = ({ selectedLocation }) => {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: REACT_APP_GOOGLE_MAPS_KEY,\r\n    libraries: [\"places\"],\r\n  });\r\n\r\n  const [geoJsonData, setGeoJsonData] = useState(null);\r\n  const mapRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setGeoJsonData(boundaryGeoJSON);\r\n    }, 1000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedLocation && mapRef.current) {\r\n      const bounds = new window.google.maps.LatLngBounds();\r\n      bounds.extend(selectedLocation);\r\n      mapRef.current.fitBounds(bounds);\r\n    }\r\n  }, [selectedLocation]);\r\n\r\n  const mapContainerStyle = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  };\r\n\r\n  const center = {\r\n    lat: 17.385044,\r\n    lng: 78.486671,\r\n  };\r\n\r\n  const zoom = 10;\r\n\r\n  if (loadError) return \"Error loading maps\";\r\n  if (!isLoaded) return \"Loading maps\";\r\n\r\n  return (\r\n    <div style={{ height: \"100%\", width: \"100%\" }}>\r\n      <GoogleMap\r\n        mapContainerStyle={mapContainerStyle}\r\n        center={center}\r\n        zoom={zoom}\r\n        onLoad={(map) => (mapRef.current = map)}\r\n      >\r\n        {geoJsonData &&\r\n          geoJsonData.features.map((feature, index) => {\r\n            const randomColor = getRandomColor();\r\n            \r\n            if (feature.geometry.type === 'LineString') {\r\n              const paths = feature.geometry.coordinates.map((coord) => ({\r\n                lat: coord[1],\r\n                lng: coord[0],\r\n              }));\r\n\r\n              return (\r\n                <React.Fragment key={index}>\r\n                  <Polyline\r\n                    path={paths}\r\n                    options={{\r\n                      strokeColor: randomColor,\r\n                      strokeOpacity: 0.8,\r\n                      strokeWeight: 2,\r\n                    }}\r\n                  />\r\n                </React.Fragment>\r\n              );\r\n            }\r\n\r\n            if (feature.geometry.type === 'Polygon') {\r\n              const paths = feature.geometry.coordinates[0].map((coord) => ({\r\n                lat: coord[1],\r\n                lng: coord[0],\r\n              }));\r\n\r\n              return (\r\n                <React.Fragment key={index}>\r\n                  <Polygon\r\n                    paths={paths}\r\n                    options={{\r\n                      strokeColor: randomColor,\r\n                      strokeOpacity: 0.8,\r\n                      strokeWeight: 2,\r\n                      fillColor: randomColor,\r\n                      fillOpacity: 0.35,\r\n                    }}\r\n                  />\r\n                </React.Fragment>\r\n              );\r\n            }\r\n\r\n            return null;\r\n          })}\r\n        {selectedLocation && (\r\n          <Polygon\r\n            paths={[\r\n              { lat: selectedLocation.lat + 0.01, lng: selectedLocation.lng - 0.01 },\r\n              { lat: selectedLocation.lat + 0.01, lng: selectedLocation.lng + 0.01 },\r\n              { lat: selectedLocation.lat - 0.01, lng: selectedLocation.lng + 0.01 },\r\n              { lat: selectedLocation.lat - 0.01, lng: selectedLocation.lng - 0.01 },\r\n            ]}\r\n            options={{\r\n              strokeColor: \"#FF0000\",\r\n              strokeOpacity: 0.8,\r\n              strokeWeight: 2,\r\n              fillColor: \"#FF0000\",\r\n              fillOpacity: 0.35,\r\n            }}\r\n          />\r\n        )}\r\n      </GoogleMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}